一.考察this三板斧
1.1
function show () {
	console.log('this:', this);
}
var obj = {
	a: 1,
	show: show
};
obj.show();  // obj 如果一个函数是某个对象的方法，并且对象使用句点符号触发函数，那么this指向的就是该函数作为那个对象的属性的对象，也就是，this指向句点左边的对象

function show () {
	console.log('this:', this);
}
var obj = {
	show: function() {
		show();
	}
};
obj.show();   // window  如果一个函数作为FFI被调用，意味着这个函数不符合以上任意一种调用方式，this指向全局对象，在浏览器中，即是window

1.2
var obj = {
	show: function() {
		console.log('this:', this);
	}
};
(0, obj.show)();   // window ,号运算符返回最后一个参数的值。所以属于函数调用this指向window

1.3
var obj = {
	sub: {
		show: function() {
			console.log('this:', this);
		}
	}
};
	
1.4
var obj = {
	show: function() {
		console.log('this:', this);
	}
}
var newobj = new obj.show();  // newobj 如果 new 关键词出现在被调用函数的前面，那么JavaScript引擎会创建一个新的对象，被调用函数中的this指向的就是这个新创建的函数

1.5
var obj = {
	show: function() {
		console.log('this:', this);
	}
};
var newobj = new (obj.show.bind(obj))(); newobj new操作符的优先级高于bind

1.7
var obj = {
	show: function() {
		console.log('this:', this);
	}
};
var elem = document.getElementById('book-search-results');
elem.addEventListener('click', obj.show);   // window obj.show 返回一个函数 属于函数调用
elem.addEventListener('click', obj.show.bind(obj)); obj 如果通过apply、call或者bind的方式触发函数，那么函数中的this指向传入函数的第一个参数
elem.addEventListener('click', function(){
	obj.show();		// obj 如果一个函数是某个对象的方法，并且对象使用句点符号触发函数，那么this指向的就是该函数作为那个对象的属性的对象，也就是，this指向句点左边的对象
});
二.作用域
2.1
var person = 1;
function showPerson(){
	var person = 2;
	console.log(person);
}
showPerson();	// 2 当我们要使用声明的变量时 JS引擎总会从最近的一个域，向外层域查找；

2.2
var person = 1;
function showPerson(){
	console.log(person);
	person = 2;  
}
showPerson(); // undefined var有变量提升的效果 浏览器引擎的执行过程。 var person; console.log(person);person = 2;

2.3
var person = 1;
function showPerson(){
	console.log(person);
	var person = 2;
	function person(){}
}
showPerson();   // f person(){} 函数也有变量提升的效果 而且始终先于变量

2.4
var person = 1;
function showPerson(){
	console.log(person);

	function person(){}
	var person = 2;
}
showPerson();  // f person(){} 如上

2.5
for(var i = 0;i < 10;i++){
	console.log(i); // 0 1 2 3 4 5 6 7 8 9
}

for(var i = 0;i<10;i++){
	setTimeout(function(){
		console.log(i); // 10 10 10 10 10 10 10 10 10 10 var变量提升效果 最后执行闭包引用了全局对象 i = 10
	},0)
}

for(var i = 0; i<10; i++){
	(function(i){
		setTimeout(function(){
			console.log(i); // 0 1 2 3 4 5 6 7 8 9  使用即时运行函数，将i通过参数传递，拷贝一份到外部函数作用域中
		},0)
	})(i)
}

三.面向对象
3.1
function Person(){
	this.name = 1;
	return {}
}
var person = new Person();
console.log('name:', person.name);  //  undefined new Person() 返回{}， person 指向 {}

3.2
function Person(){
	this.name = 1;
}
Person.prototype = {
	show: function(){
		console.log('name is:', this.name)
	}
}
var person = new Person();
person.show();  //  1  person实例可以调用__propo__ 指向构造函数Person的propotype


3.3
function Person(){
	this.name = 1
}
Person.prototype = {
	name: 2,
	show: function(){
		console.log('name is:', this.name);
	}
}
var person = new Person();

Person.prototype.show = function(){
	console.log('new show');
}

person.show();  // new show 后面的show方法覆盖前面的show方法

3.4
function Person(){
	this.name = 1;
}
Person.prototype = {
	name: 2,
	show: function(){
		console.log('name is:', this.name);
	}
}
var person = new Person();
var person2 = new Person();

person.show = function(){
	console.log('new show');
}

person2.show();  // 1 调用构造函数原型上的方法
person.show(); // new show 实例上的方法优先调用

四.综合题
function Person(){
	this.name = 1;
}
Person.prototype = {
	name: 2,
	show: function(){
		console.log('name is:', this.name);
	}
}

Person.prototype.show();   // 2 当前this指向 Person的原型 输出原型上的属性name = 2
(new Person()).show(); // 1 当前this指向新的实例 输出实例的属性name = 1













































